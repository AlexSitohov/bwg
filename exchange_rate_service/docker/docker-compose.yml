version: '3.9'
name: exchange_rates_service
services:

  exchange_rates_db:
    hostname: exchange_rates_db
    container_name: exchange_rates_db
    image: postgres
    command: [ "postgres", "-c", "max_prepared_transactions=200" ]
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_DB_LOGIN}
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
    ports:
      - "${POSTGRES_DB_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB_PORT} -U $${POSTGRES_DB_LOGIN}" ]
      timeout: 2s
      retries: 15

  exchange_rate_service:
    container_name: exchange_rate_service
    restart: unless-stopped
    working_dir: /code/src
    command: uvicorn --log-level debug app.main:app --host $APP_HOST --port $APP_PORT --reload
    build:
      context: ..
      dockerfile: Dockerfile
    depends_on:
      exchange_rates_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_HOST
      - APP_PORT
      - POSTGRES_DB_LOGIN
      - POSTGRES_DB_PASSWORD
      - POSTGRES_DB_HOST
      - POSTGRES_DB_PORT
      - POSTGRES_DB_NAME
      - SQLALCHEMY_ECHO
      - SQLALCHEMY_POOL_SIZE
      - REDIS_URL
      - LOGGING_LEVEL
    ports:
      - "8000:8000"
    volumes:
      - ../src:/code/src

  exchange_rate_consumer:
    container_name: exchange_rate_consumer
    build:
      context: ../../exchange_rate_consumer/
      dockerfile: Dockerfile
    command: python3 main.py
    restart: unless-stopped
    depends_on:
      exchange_rates_db:
        condition: service_healthy
    environment:
      - RABBITMQ_QUEUE_NAME
      - RABBITMQ_USERNAME
      - RABBITMQ_PASSWORD
      - RABBITMQ_HOST
      - POSTGRES_DB_LOGIN
      - POSTGRES_DB_PASSWORD
      - POSTGRES_DB_HOST
      - POSTGRES_DB_PORT
      - POSTGRES_DB_NAME
      - SQLALCHEMY_ECHO
      - SQLALCHEMY_POOL_SIZE
      - LOGGING_LEVEL
    volumes:
      - ../../exchange_rate_consumer/src:/code/src

  exchange_rate_producer:
    container_name: exchange_rate_producer
    build:
      context: ../../exchange_rate_producer/
      dockerfile: Dockerfile
    command: python3 main.py
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - RABBITMQ_QUEUE_NAME
      - RABBITMQ_USERNAME
      - RABBITMQ_PASSWORD
      - RABBITMQ_HOST
      - POSTGRES_DB_LOGIN
      - POSTGRES_DB_PASSWORD
      - POSTGRES_DB_HOST
      - POSTGRES_DB_PORT
      - POSTGRES_DB_NAME
      - SQLALCHEMY_ECHO
      - SQLALCHEMY_POOL_SIZE
      - LOGGING_LEVEL

    volumes:
      - ../../exchange_rate_producer/src:/code/src


  #  kafka:
  #    container_name: kafka
  #    image: confluentinc/cp-kafka:7.0.0
  #    restart: unless-stopped
  #    ports:
  #      - "9092:9092"
  #    environment:
  #      KAFKA_BROKER_ID: 1
  #      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092
  #      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #    depends_on:
  #      - zookeeper
  #    healthcheck:
  #      test: kafka-topics --bootstrap-server kafka:9092 --list
  #      interval: 10s
  #      timeout: 5s
  #      retries: 5
  #
  #  zookeeper:
  #    container_name: zookeeper
  #    image: confluentinc/cp-zookeeper:7.0.0
  #    restart: unless-stopped
  #    ports:
  #      - "2181:2181"
  #    environment:
  #      ZOOKEEPER_TICK_TIME: 2000
  #      ZOOKEEPER_CLIENT_PORT: 2181
  #    healthcheck:
  #      test: nc -z localhost 2181 || exit -1
  #      interval: 10s
  #      timeout: 5s
  #      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.9.12-management
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3


  nginx_service:
    image: nginx:latest
    container_name: nginx_service
    ports:
      - "80:80"
    volumes:
      - ../nginx:/etc/nginx/conf.d
    depends_on:
      - exchange_rate_service

  redis:
    container_name: redis
    hostname: ${REDIS_HOST}
    image: redis:7.0.5-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3